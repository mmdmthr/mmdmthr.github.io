{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/08/5-singkatan-prinsip-pemrograman/","result":{"data":{"site":{"siteMetadata":{"title":"Dev Jurnal","author":"mmdmthr","siteUrl":"https://mmdmthr.github.io","comment":{"disqusShortName":"","utterances":"mmdmthr/devjurnal"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"eab16136-d9df-5cd6-bbd9-2bdf38067be6","excerpt":"Mengarungi industri teknologi, khususnya di bidang \npengembangan perangkat lunak, membutuhkan keterampilan \npemrograman atau menulis kode. Semakin besar skala sebuah aplikasi perangkat lunak maka kode \ntidak bisa asal ditulis begitu saja. Ada beberapa kaidah populer \ndalam dunia…","html":"<p>Mengarungi industri teknologi, khususnya di bidang\npengembangan perangkat lunak, membutuhkan keterampilan\npemrograman atau menulis kode.</p>\n<p>Semakin besar skala sebuah aplikasi perangkat lunak maka kode\ntidak bisa asal ditulis begitu saja. Ada beberapa kaidah populer\ndalam dunia pemrograman yang mungkin sering kita dengar singkatan-singkatannya.</p>\n<p><strong>KISS (<em>Keep It Simple Stupid</em>)</strong></p>\n<p>Tulis kode dengan sesederhana mungkin.\nJangan tergoda untuk membuat kode yang rumit. Jika sebuah kode bisa ditulis\ndalam satu baris, tulislah satu baris. </p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sederhana, mudah dibaca dan langsung dapat dipahami bagaimana kode tersebut bekerja.\nGunakan nama variabel yang jelas, mencerminkan nilai dalam variabel tersebut.\nGunakan library yang sudah tersedia. Bayangkan kita akan bekerja dengan kode-kode itu\nlagi setelah 6 bulan tidak melihatnya, apakah kita masih bisa memahaminya?\nJagalah supaya tetap sederhana agar tidak sakit kepala.</p>\n<p><strong>DRY (<em>Don’t Repeat Yourself</em>)</strong></p>\n<p>Jangan mengulang penulisan kode. Perilaku\ntersebut adalah kesalahan umum dalam koding yang bisa dihindari dengan beberapa\nmetode. Jika masih melakukan copy paste pada sebuah blok code artinya kode kita belum DRY.</p>\n<p><strong><em>Open/Closed</em></strong></p>\n<p>Terbuka untuk pengembangan, tapi tertutup untuk perubahan.\nPrinsip ini mendorong kita untuk menulis kode yang dapat dikembangkan, namun sebisa mungkin\ntertutup untuk modifikasi secara langsung. Prinsip ini membutuhkan keterampilan desain dan analisis\nyang tinggi. Kita bisa melihat contohnya pada <em>library/framework</em> yang sudah matang dan berumur panjang.</p>\n<p><strong>SRP (<em>Single Responsibility Principle</em>)</strong></p>\n<p>Setiap class/modul memiliki satu fungsi spesifik.\nJangan menambahkan terlalu banyak tugas pada sebuah class karena itu akan meningkatkan kerumitan.\n<em>Refactor</em> dan pecah-pecah menjadi class atau modul yang lebih kecil.</p>\n<p><strong>YAGNI (<em>You Aren’t Going to Need It</em>)</strong></p>\n<p>Jangan membuat kode yang tidak diperlukan saat ini.\nJangan membuat kode untuk masa depan. Selesaikan masalah saat ini lalu <em>refactor</em>.\nJangan memperbaiki masalah yang tidak ada.</p>","frontmatter":{"title":"5 Singkatan Prinsip Pemrograman","date":"August 28, 2021"}}},"pageContext":{"slug":"/2021/08/5-singkatan-prinsip-pemrograman/","previous":{"fields":{"slug":"/2021/08/melihat-eksekusi-kode/"},"frontmatter":{"title":"Melihat Eksekusi Kode, Langkah demi Langkah"}},"next":{"fields":{"slug":"/2021/09/mengirim-email-menggunakan-mailgun-laravel/"},"frontmatter":{"title":"Mengirim Email Menggunakan Mailgun pada Laravel"}}}},"staticQueryHashes":["2486386679","3128451518"]}