{"componentChunkName":"component---src-templates-blog-post-js","path":"/2023/08/menulis-versi-package-dependency/","result":{"data":{"site":{"siteMetadata":{"title":"Dev Jurnal","author":"mmdmthr","siteUrl":"https://mmdmthr.github.io","comment":{"disqusShortName":"","utterances":"mmdmthr/devjurnal"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"eb29d7a5-3b73-5f17-8975-8d4b281c86f8","excerpt":"Pengembangan perangkat lunak modern seringkali melibatkan penggunaan banyak paket (package) atau pustaka (library) dari sumber eksternal. Ketergantungan paket ini memungkinkan pengembang untuk memanfaatkan fungsionalitas yang sudah ada tanpa perlu membuat semuanya dari awal…","html":"<p>Pengembangan perangkat lunak modern seringkali melibatkan penggunaan banyak paket (<em>package</em>) atau pustaka (<em>library</em>) dari sumber eksternal. Ketergantungan paket ini memungkinkan pengembang untuk memanfaatkan fungsionalitas yang sudah ada tanpa perlu membuat semuanya dari awal. Namun, dalam pengelolaan dependency paket, salah satu hal yang penting adalah menentukan versi yang sesuai.</p>\n<h3 id=\"mengapa-package-version-penting\" style=\"position:relative;\"><a href=\"#mengapa-package-version-penting\" aria-label=\"mengapa package version penting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mengapa Package Version Penting?</h3>\n<p>Ketika kita menggunakan paket atau pustaka dari pihak ketiga, sangat penting untuk memilih versi yang sesuai dengan proyek kita. Setiap versi mungkin memiliki perbaikan bug, peningkatan performa, atau bahkan perubahan fungsionalitas yang signifikan. Memilih versi yang tepat dapat mencegah konflik dan masalah yang tidak diinginkan dalam pengembangan perangkat lunak kita.</p>\n<h3 id=\"menggunakan-format-semantic-versioning-semver\" style=\"position:relative;\"><a href=\"#menggunakan-format-semantic-versioning-semver\" aria-label=\"menggunakan format semantic versioning semver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Menggunakan Format <em>Semantic Versioning</em> (SemVer)</h3>\n<p>Cara umum untuk menentukan versi dependency paket adalah melalui prinsip <em>Semantic Versioning</em> (SemVer). SemVer terdiri dari tiga angka yang menunjukkan “MAJOR.MINOR.PATCH”. Ketiga komponen ini memiliki arti sebagai berikut:</p>\n<ol>\n<li><strong>MAJOR</strong>: Ditingkatkan ketika kita melakukan perubahan yang tidak kompatibel dengan versi sebelumnya dalam API paket.</li>\n<li><strong>MINOR</strong>: Ditingkatkan ketika kita menambahkan fitur baru yang kompatibel dengan versi sebelumnya (<em>backward compatible</em>) dalam API paket.</li>\n<li><strong>PATCH</strong>: Ditingkatkan ketika kita membuat perbaikan yang kompatibel dengan versi sebelumnya (<em>backward compatible</em>) dalam API paket.</li>\n</ol>\n<p>Misalnya, jika paket memiliki versi “2.1.3”, artinya versi utama adalah 2, versi minor adalah 1, dan versi patch adalah 3.</p>\n<h3 id=\"menulis-package-dependency-dalam-file-konfigurasi\" style=\"position:relative;\"><a href=\"#menulis-package-dependency-dalam-file-konfigurasi\" aria-label=\"menulis package dependency dalam file konfigurasi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Menulis Package Dependency dalam File Konfigurasi</h3>\n<p>File konfigurasi proyek seperti “package.json”, “composer.json atau “requirements.txt” biasanya digunakan untuk menulis daftar dependency paket. Berikut adalah contoh bagaimana kita dapat menulis dependency dengan menggunakan format SemVer:</p>\n<p><strong>package.json:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"nama-paket\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.2.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>requirements.txt:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nama-paket==1.2.0</code></pre></div>\n<p>Pada contoh di atas, tanda <code class=\"language-text\">^</code> pada “package.json” dan tanda <code class=\"language-text\">==</code> pada “requirements.txt” memberi tahu sistem manajemen paket untuk menggunakan versi yang kompatibel dengan versi yang ditentukan, namun tetap memperbolehkan peningkatan versi minor atau patch.</p>\n<h3 id=\"menangani-versi-secara-hati-hati\" style=\"position:relative;\"><a href=\"#menangani-versi-secara-hati-hati\" aria-label=\"menangani versi secara hati hati permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Menangani Versi Secara Hati-hati</h3>\n<p>Saat menulis versi dependency, penting untuk mempertimbangkan seberapa kritis paket tersebut terhadap proyek kita. Jika kita membutuhkan stabilitas, mungkin lebih baik untuk menentukan versi yang spesifik. Namun, jika kita ingin memanfaatkan perbaikan dan peningkatan baru, menggunakan tanda seperti <code class=\"language-text\">^</code> atau <code class=\"language-text\">~</code> dapat membantu kita tetap mendapatkan pembaruan tanpa mengorbankan stabilitas sepenuhnya.</p>\n<h3 id=\"memantau-pembaruan-paket\" style=\"position:relative;\"><a href=\"#memantau-pembaruan-paket\" aria-label=\"memantau pembaruan paket permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Memantau Pembaruan Paket</h3>\n<p>Terkadang, pembaruan paket dapat mempengaruhi kinerja atau stabilitas proyek kita. Oleh karena itu, penting untuk secara berkala memeriksa pembaruan yang tersedia untuk dependency kita dan melakukan uji coba sebelum menerapkannya dalam produksi.</p>","frontmatter":{"title":"Menulis Versi Package Dependency dalam Pengembangan Perangkat Lunak","date":"August 23, 2023"}}},"pageContext":{"slug":"/2023/08/menulis-versi-package-dependency/","previous":{"fields":{"slug":"/2023/08/review-password-manager-dashlane/"},"frontmatter":{"title":"Review Password Manager - Dashlane"}},"next":{"fields":{"slug":"/2023/08/memahami-secure-development-lifecycle/"},"frontmatter":{"title":"Memahami Secure Development Lifecycle (SDLC)"}}}},"staticQueryHashes":["2486386679","3128451518"]}