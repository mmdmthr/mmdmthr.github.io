{"componentChunkName":"component---src-templates-blog-post-js","path":"/2024/07/big-o-notation-cheatseet/","result":{"data":{"site":{"siteMetadata":{"title":"Dev Jurnal","author":"mmdmthr","siteUrl":"https://mmdmthr.github.io","comment":{"disqusShortName":"","utterances":"mmdmthr/devjurnal"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"5e64036c-f6a9-57c5-9882-57cdc871cdc6","excerpt":"Notation Name Description Example (Time complexity) O(1) Constant complexity The time and space consumed is consistent regardless of input size Retrieving a value from a hash table given a specific key O(log n) Logarithmic complexity The time and space consumed growsâ€¦","html":"<table>\n<thead>\n<tr>\n<th>Notation</th>\n<th>Name</th>\n<th>Description</th>\n<th>Example (Time complexity)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>O(1)</td>\n<td>Constant complexity</td>\n<td>The time and space consumed is consistent regardless of input size</td>\n<td>Retrieving a value from a hash table given a specific key</td>\n</tr>\n<tr>\n<td>O(log n)</td>\n<td>Logarithmic complexity</td>\n<td>The time and space consumed grows logarithmically with the input size</td>\n<td>Binary search on a sorted array</td>\n</tr>\n<tr>\n<td>O(n)</td>\n<td>Linear complexity</td>\n<td>The time and space consumed grows in direct proportion to the input size</td>\n<td>Searching for a single element in an array (looping over an array)</td>\n</tr>\n<tr>\n<td>O(n log n)</td>\n<td>Linearithmic complexity</td>\n<td>The time and space consumed grows proportionally to n log n (where n is the size of the input)</td>\n<td>Efficient sorting algorithms like quicksort</td>\n</tr>\n<tr>\n<td>O(n^2)</td>\n<td>Quadratic complexity</td>\n<td>The time and space consumed grows with the square of the input size</td>\n<td>simple sorting algorithms like bubble sort. looping over an array, and comparing the current element with all other elements in the array</td>\n</tr>\n<tr>\n<td>O(n^3)</td>\n<td>Cubic complexity</td>\n<td>The time and space consumed grows with the cube of the input size</td>\n<td>Triple nested loops</td>\n</tr>\n<tr>\n<td>O(2^n)</td>\n<td>Exponential complexity</td>\n<td>The time and space consumed doubles with eacch increment to the input size</td>\n<td>Recursive calculation if Fibonacci numbers</td>\n</tr>\n<tr>\n<td>O(n!)</td>\n<td>Factorial complexity</td>\n<td>The time and space consumed grows factorially to the size of the input</td>\n<td>Solving the traveling salesman problem with brute force</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"Big O Notation Cheatseet","date":"July 13, 2024"}}},"pageContext":{"slug":"/2024/07/big-o-notation-cheatseet/","previous":{"fields":{"slug":"/2024/07/daftar-kursus-ai-gratis/"},"frontmatter":{"title":"Daftar Kursus AI Gratis"}},"next":{"fields":{"slug":"/2024/07/lesson-learned-di-awal-karir/"},"frontmatter":{"title":"Lesson Learned di Awal Karir"}}}},"staticQueryHashes":["2486386679","3128451518"]}